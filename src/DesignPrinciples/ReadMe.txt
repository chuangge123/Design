设计原则：
1.代码重用性（即：相同功能的代码，不用多次编辑）
2.可读性（即:编辑规范性，便于其他程序员的阅读和理解）
3.可扩展性（即：当我们增加新的功能后，对原来的功能没有影响）
4.可靠性（即：当我们增加新的功能后，对原来的功能没有影响）
5.使程序呈现高内聚、低耦合的特性。

原则总结：
单一职责、 接口隔离：保持接口独立原则- 就是把每个方法都尽量拆分成一个个小接口 与实现类。——策略模式就是这个意思
依赖反转： 在传递依赖时 最好建立的（返回值）是其接口 或者抽象类的 类型。方便功能扩展。比如小黄鸭 有飞的高  飞的低
里氏替换： 在如果子类想修改父类的方法，那么把子类和父类关系重整 让他俩同时继承一个基类（通过依赖、关联、组合、聚合）等 进行使用方法
开闭原则： 扩展开放，修改关闭（功能增加，原先功能不变
迪米特法则：成员变量 ，方法、类、（参数有其对象），方法返回值为对象。那么就可以称之为 是直接朋友。 直接朋友可以互相透露信息。非直接朋友只调用封装即可。减低耦合
合成复用原则：是尽量使用合成/聚合的方式，而不是继承。
